# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StreckenkmFinder
                                 A QGIS plugin
 Klicke auf eine Karte und erhalte den nähsten Streckenkm
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-15
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Christoph Mellüh
        email                : christoph.mellueh@deutschebahn.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import re

from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator, Qt
from qgis.PyQt.QtGui import QColor, QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsDistanceArea, QgsPointXY, QgsSpatialIndex
from qgis.core import QgsFeature, QgsGeometry, QgsProject, QgsSimpleLineSymbolLayer, QgsVectorLayer
from qgis.gui import QgsHighlight, QgsMapToolEmitPoint
from .ui.settingswidget import SettingsWidget

NEIGHBOR_SAMPLE_SIZE = 100


def string_to_real(text: str) -> float | None:
    if text is None:
        return None
    head, tail = re.findall("(-?\d+,\d) \+ (-?\d+)", text)[0]
    head = float(head.replace(",", "."))
    return round(head + int(tail) / 1000, 4)


class NearestPointFinder(QgsMapToolEmitPoint):
    def __init__(self, iface, spatial_index, layer: QgsVectorLayer, distance_calc):
        self.canvas = iface.mapCanvas()
        super().__init__(self.canvas)
        self.iface = iface
        self.spatial_index: QgsSpatialIndex = spatial_index
        self.layer = layer
        self.distance_calc = distance_calc
        self.temp_layer: QgsVectorLayer | None = None
        self.create_hidden_layer()
        self.temp_layer_provider = self.temp_layer.dataProvider()
        self.line: QgsFeature | None = None
        self.highlight = None

    def create_hidden_layer(self):
        self.temp_layer = QgsVectorLayer("LineString?crs=EPSG:5683", "Nearest Line", "memory")
        QgsProject.instance().addMapLayer(self.temp_layer)
        tree_view = self.iface.layerTreeView()
        model = self.iface.layerTreeView().layerTreeModel()
        root = QgsProject().instance().layerTreeRoot()
        node = root.findLayer(self.temp_layer.id())
        index = model.node2index(node)
        tree_view.setRowHidden(index.row(), index.parent(), True)
        tree_view.setCurrentIndex(model.node2index(root))

        line_symbol = QgsSimpleLineSymbolLayer()

        # Set the line width (thick line)
        line_symbol.setWidth(2.0)  # Adjust for your desired thickness

        # Set the line color (red)
        line_symbol.setColor(QColor(255, 0, 0))

        # Set the line style (dotted)
        line_symbol.setPenStyle(Qt.DotLine)

        # Apply the symbol layer to the layer renderer
        renderer = self.temp_layer.renderer()
        symbol = renderer.symbol()
        symbol.changeSymbolLayer(0, line_symbol)

    def __del__(self):
        """Remove the layer from the project."""
        QgsProject.instance().removeMapLayer(self.temp_layer)
        print(f"Layer {self.temp_layer.id()} deleted.")
        if self.highlight:
            self.highlight.hide()

    def get_neighbor(self, point: QgsPointXY) -> QgsFeature | None:
        nearest_ids = self.spatial_index.nearestNeighbor(QgsPointXY(point), NEIGHBOR_SAMPLE_SIZE)
        nearest_feature = None
        nearest_dist = float('inf')
        if not nearest_ids:
            return None
        for fid in nearest_ids:
            feature = self.layer.getFeature(fid)
            geom = feature.geometry()
            distance = geom.distance(QgsGeometry.fromPointXY(point))
            if distance < nearest_dist:
                nearest_feature = feature
                nearest_dist = distance
        return nearest_feature

    def canvasReleaseEvent(self, event):
        if not self.layer or not self.spatial_index:
            QMessageBox.warning(None, "Warning", "No valid point layer or spatial index.")
            return

        # Get the clicked point in map coordinates
        click_point = QgsPointXY(self.toMapCoordinates(event.pos()))

        # Find nearest point ID
        nearest_feature = self.get_neighbor(click_point)
        if not nearest_feature:
            QMessageBox.information(None, "Info", "No points found nearby.")
            return

        self.highlight_feature(nearest_feature)
        nearest_geom = nearest_feature.geometry()
        rec_dist, closest_point, next_index, is_left = nearest_geom.closestSegmentWithContext(click_point)
        dist = self.get_partial_line_length(nearest_feature.geometry(), next_index - 1, closest_point)
        strecken_nr = nearest_feature[
            "GKA_STRECKEGLEISNR"] if "GKA_STRECKEGLEISNR" in nearest_feature.fields().names() else "No StreckengleisNr"
        strecken_km_text = nearest_feature[
            "VON_KM_V"] if "VON_KM_V" in nearest_feature.fields().names() else "No StreckenKm"

        self.draw_line(QgsPointXY(click_point), closest_point)
        if not strecken_km_text:
            QMessageBox.information(None, "Kein Hauptgleis", "Streckenkilometer nicht vorhanden")
            return
        position = string_to_real(strecken_km_text) + dist / 1000

        # Display information
        QMessageBox.information(None, "StreckenNr",
                                f"Name: {strecken_nr}\nStrecken Km: {position:.3f}\n index: {next_index}")

    def get_partial_line_length(self, line: QgsGeometry, index: int, new_point):
        line_strings = line.asMultiPolyline()
        cumulative_length = 0
        current_segment = 0
        last_point = [line_strings[0][0]]
        for line in line_strings:
            vertices = line  # Vertices of the current LineString
            last_point = vertices[0]
            num_segments = len(vertices) - 1  # Number of segments in the current LineString

            # Check if the target segment index is within this LineString
            if current_segment + num_segments > index:
                # Calculate the partial length in this LineString
                target_index = index - current_segment  # Segment index within this LineString
                last_point = vertices[target_index]
                partial_vertices = vertices[:target_index + 1]  # Include points up to the target segment
                partial_line = QgsGeometry.fromPolylineXY(partial_vertices)
                cumulative_length += partial_line.length()
                break
            else:
                # Add the full length of this LineString
                full_line = QgsGeometry.fromPolylineXY(vertices)
                cumulative_length += full_line.length()
                current_segment += num_segments
        partial_line = QgsGeometry.fromPolylineXY([last_point, new_point])
        cumulative_length += partial_line.length()
        return cumulative_length

    def highlight_feature(self, feature: QgsFeature):
        # Remove previous highlight
        self.hide_highlight()

        # Highlight the new feature
        self.highlight = QgsHighlight(self.canvas, feature, self.layer)
        self.highlight.setColor(QColor(255, 0, 0))  # Red highlight
        self.highlight.setWidth(2)
        self.highlight.show()

    def hide_highlight(self):
        if self.highlight:
            self.highlight.hide()

    def delete_lines(self):
        self.temp_layer_provider.truncate()
        self.temp_layer.updateExtents()
        self.temp_layer.triggerRepaint()

    def draw_line(self, start_point, end_point):
        # Create a line feature
        self.delete_lines()

        line_geom = QgsGeometry.fromPolylineXY([start_point, end_point])
        line_feature = QgsFeature()
        line_feature.setGeometry(line_geom)
        # Add the line feature to the temporary layer
        self.temp_layer_provider.addFeature(line_feature)
        self.temp_layer.updateExtents()
        self.temp_layer.triggerRepaint()
        self.line = line_feature


class StreckenkmFinder:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'StreckenkmFinder_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)


        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&DB_Streckenkm')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.canvas = iface.mapCanvas()
        self.spatial_index = None
        self.distance_calc = QgsDistanceArea()
        self.distance_calc.setEllipsoid('WGS84')
        self.iface.mapCanvas().mapToolSet.connect(self.map_tool_changed)


        # Create Settings Widget
        self.settings_widget = SettingsWidget()
        self.layer = None
        self.field_name = None
        self.field_is_real = None
        self.ignore_sidings = None
        self.connect_settings_widget()

        # Declare MapTool
        self.map_tool: NearestPointFinder|None = None

    def create_spatial_index(self):
        # Build spatial index for the point layer
        self.spatial_index = QgsSpatialIndex(self.layer.getFeatures())

        # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('StreckenkmFinder', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = os.path.join(os.path.dirname(__file__), "icon.png")
        self.add_action(
            icon_path,
            text=self.tr(u'Streckenkilometer'),
            callback=self.run,
            parent=self.iface.mainWindow(),
            add_to_toolbar=True)

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&DB_Streckenkm'),
                action)
            self.iface.removeToolBarIcon(action)

    def connect_settings_widget(self):
        self.settings_widget.accept.connect(self.update_settings)

    def update_settings(self):
        self.layer,self.field_name,self.field_is_real,self.ignore_sidings = self.settings_widget.get_selected_settings()
        if self.layer:
            self.create_spatial_index()

    def open_settings(self):
        self.settings_widget.reload_layer_combobox(self.layer)
        self.settings_widget.reload_attribute_combobox(self.field_name)
        self.settings_widget.show()

    def map_tool_changed(self):
        if self.map_tool is not None:
            self.map_tool.hide_highlight()
            self.map_tool.delete_lines()

    def set_map_tool(self):
        self.map_tool = NearestPointFinder(self.iface, self.spatial_index, self.layer, self.distance_calc)
        self.iface.mapCanvas().setMapTool(self.map_tool)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.spatial_index is None:
            self.open_settings()
        else:
            self.set_map_tool()
            # Fetch the currently loaded layers

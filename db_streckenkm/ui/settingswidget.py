# -*- coding: utf-8 -*-
"""
/***************************************************************************
 StreckenkmFinderDialog
                                 A QGIS plugin
 Klicke auf eine Karte und erhalte den nähsten Streckenkm
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-11-15
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Christoph Mellüh
        email                : christoph.mellueh@deutschebahn.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import QgsMessageLog,Qgis
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets,QtCore
from qgis.core import QgsProject,QgsVectorLayer
from .SettingsWidget_ui import Ui_SettingsWidget
from PyQt5 import QtWidgets,QtCore

class SettingsWidget(QtWidgets.QWidget, Ui_SettingsWidget):
    accept = QtCore.pyqtSignal()
    reject = QtCore.pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(SettingsWidget, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.comboBox_layer.currentTextChanged.connect(self.reload_attribute_combobox)
        self.reload_layer_combobox()
        self.accept.connect(self.hide)
        self.reject.connect(self.hide)

    def reload_layer_combobox(self,selected_layer = None):
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.comboBox_layer.clear()
        # Populate the comboBox with names of all the loaded layers
        self.comboBox_layer.addItems([layer.name() for layer in layers if isinstance(layer.layer(),QgsVectorLayer)])
        if selected_layer:
            self.comboBox_layer.setCurrentText(selected_layer.name())

    def get_selected_settings(self):
        layer_name = self.comboBox_layer.currentText()
        layers = QgsProject.instance().mapLayers().values()
        layer:QgsVectorLayer|None = None
        for layer in layers:
            if layer.name() == layer_name:
                layer = layer
                break
        field_name = self.comboBox_field.currentText()
        attribute_is_real = self.checkBox_real.isChecked()
        ignore_sidings = self.checkBox_ignore_siding.isChecked()
        return layer,field_name,attribute_is_real,ignore_sidings

    def reload_attribute_combobox(self, selected_field = None):
        layer,_,_,_ = self.get_selected_settings()
        field_names = [field.name() for field in layer.fields()]
        self.comboBox_field.clear()
        self.comboBox_field.addItems(field_names)
        if selected_field:
            self.comboBox_field.setCurrentText(selected_field)
